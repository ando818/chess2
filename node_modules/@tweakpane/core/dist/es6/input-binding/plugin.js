import { createBlade } from '../blade/common/model/blade';
import { InputBindingController } from '../blade/input-binding/controller/input-binding';
import { InputBinding } from '../common/binding/input';
import { ValueMap } from '../common/model/value-map';
import { createValue } from '../common/model/values';
import { ViewProps } from '../common/model/view-props';
import { ParamsParsers } from '../common/params-parsers';
import { isEmpty } from '../misc/type-util';
export function createInputBindingController(plugin, args) {
    var _a;
    const result = plugin.accept(args.target.read(), args.params);
    if (isEmpty(result)) {
        return null;
    }
    const p = ParamsParsers;
    const valueArgs = {
        target: args.target,
        initialValue: result.initialValue,
        params: result.params,
    };
    const reader = plugin.binding.reader(valueArgs);
    const constraint = plugin.binding.constraint
        ? plugin.binding.constraint(valueArgs)
        : undefined;
    const value = createValue(reader(result.initialValue), {
        constraint: constraint,
        equals: plugin.binding.equals,
    });
    const binding = new InputBinding({
        reader: reader,
        target: args.target,
        value: value,
        writer: plugin.binding.writer(valueArgs),
    });
    const disabled = p.optional.boolean(args.params.disabled).value;
    const hidden = p.optional.boolean(args.params.hidden).value;
    const controller = plugin.controller({
        constraint: constraint,
        document: args.document,
        initialValue: result.initialValue,
        params: result.params,
        value: binding.value,
        viewProps: ViewProps.create({
            disabled: disabled,
            hidden: hidden,
        }),
    });
    return new InputBindingController(args.document, {
        binding: binding,
        blade: createBlade(),
        props: ValueMap.fromObject({
            label: 'label' in args.params
                ? (_a = p.optional.string(args.params.label).value) !== null && _a !== void 0 ? _a : null
                : args.target.key,
        }),
        valueController: controller,
    });
}
