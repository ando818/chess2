import { TpError } from '../../common/tp-error';
import { ColorController } from './controller/color';
import { createColorStringBindingReader, createColorStringParser, detectStringColorFormat, findColorStringifier, } from './converter/color-string';
import { createColorStringWriter } from './converter/writer';
import { Color } from './model/color';
import { extractColorType, parseColorInputParams, } from './util';
/**
 * @hidden
 */
export const StringColorInputPlugin = {
    id: 'input-color-string',
    type: 'input',
    accept: (value, params) => {
        if (typeof value !== 'string') {
            return null;
        }
        if ('view' in params && params.view === 'text') {
            return null;
        }
        const format = detectStringColorFormat(value, extractColorType(params));
        if (!format) {
            return null;
        }
        const stringifier = findColorStringifier(format);
        if (!stringifier) {
            return null;
        }
        const result = parseColorInputParams(params);
        return result
            ? {
                initialValue: value,
                params: result,
            }
            : null;
    },
    binding: {
        reader: (args) => { var _a; return createColorStringBindingReader((_a = extractColorType(args.params)) !== null && _a !== void 0 ? _a : 'int'); },
        equals: Color.equals,
        writer: (args) => {
            const format = detectStringColorFormat(args.initialValue, extractColorType(args.params));
            if (!format) {
                throw TpError.shouldNeverHappen();
            }
            const writer = createColorStringWriter(format);
            if (!writer) {
                throw TpError.notBindable();
            }
            return writer;
        },
    },
    controller: (args) => {
        const format = detectStringColorFormat(args.initialValue, extractColorType(args.params));
        if (!format) {
            throw TpError.shouldNeverHappen();
        }
        const stringifier = findColorStringifier(format);
        if (!stringifier) {
            throw TpError.shouldNeverHappen();
        }
        const expanded = 'expanded' in args.params ? args.params.expanded : undefined;
        const picker = 'picker' in args.params ? args.params.picker : undefined;
        return new ColorController(args.document, {
            colorType: format.type,
            expanded: expanded !== null && expanded !== void 0 ? expanded : false,
            formatter: stringifier,
            parser: createColorStringParser(format.type),
            pickerLayout: picker !== null && picker !== void 0 ? picker : 'popup',
            supportsAlpha: format.alpha,
            value: args.value,
            viewProps: args.viewProps,
        });
    },
};
