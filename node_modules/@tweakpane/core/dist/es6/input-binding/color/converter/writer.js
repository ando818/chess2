import { writePrimitive } from '../../../common/primitive';
import { colorToRgbaNumber, colorToRgbNumber } from '../converter/color-number';
import { findColorStringifier, } from '../converter/color-string';
export function createColorStringWriter(format) {
    const stringify = findColorStringifier(format);
    return stringify
        ? (target, value) => {
            writePrimitive(target, stringify(value));
        }
        : null;
}
export function createColorNumberWriter(supportsAlpha) {
    const colorToNumber = supportsAlpha ? colorToRgbaNumber : colorToRgbNumber;
    return (target, value) => {
        writePrimitive(target, colorToNumber(value));
    };
}
// TODO: Make type required in the next version
export function writeRgbaColorObject(target, value, opt_type) {
    const obj = value.toRgbaObject(opt_type);
    target.writeProperty('r', obj.r);
    target.writeProperty('g', obj.g);
    target.writeProperty('b', obj.b);
    target.writeProperty('a', obj.a);
}
// TODO: Make type required in the next version
export function writeRgbColorObject(target, value, opt_type) {
    const obj = value.toRgbaObject(opt_type);
    target.writeProperty('r', obj.r);
    target.writeProperty('g', obj.g);
    target.writeProperty('b', obj.b);
}
// TODO: Make type required in the next version
export function createColorObjectWriter(supportsAlpha, opt_type) {
    return (target, inValue) => {
        if (supportsAlpha) {
            writeRgbaColorObject(target, inValue, opt_type);
        }
        else {
            writeRgbColorObject(target, inValue, opt_type);
        }
    };
}
