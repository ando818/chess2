import { DefiniteRangeConstraint } from '../../../common/constraint/definite-range';
import { createNumberFormatter, parseNumber, } from '../../../common/converter/number';
import { ValueMap } from '../../../common/model/value-map';
import { connectValues } from '../../../common/model/value-sync';
import { createValue } from '../../../common/model/values';
import { NumberTextController } from '../../../common/number/controller/number-text';
import { Color } from '../model/color';
import { ColorPickerView } from '../view/color-picker';
import { APaletteController } from './a-palette';
import { ColorTextController } from './color-text';
import { HPaletteController } from './h-palette';
import { SvPaletteController } from './sv-palette';
/**
 * @hidden
 */
export class ColorPickerController {
    constructor(doc, config) {
        this.value = config.value;
        this.viewProps = config.viewProps;
        this.hPaletteC_ = new HPaletteController(doc, {
            value: this.value,
            viewProps: this.viewProps,
        });
        this.svPaletteC_ = new SvPaletteController(doc, {
            value: this.value,
            viewProps: this.viewProps,
        });
        this.alphaIcs_ = config.supportsAlpha
            ? {
                palette: new APaletteController(doc, {
                    value: this.value,
                    viewProps: this.viewProps,
                }),
                text: new NumberTextController(doc, {
                    parser: parseNumber,
                    baseStep: 0.1,
                    props: ValueMap.fromObject({
                        draggingScale: 0.01,
                        formatter: createNumberFormatter(2),
                    }),
                    value: createValue(0, {
                        constraint: new DefiniteRangeConstraint({ min: 0, max: 1 }),
                    }),
                    viewProps: this.viewProps,
                }),
            }
            : null;
        if (this.alphaIcs_) {
            connectValues({
                primary: this.value,
                secondary: this.alphaIcs_.text.value,
                forward: (p) => {
                    return p.rawValue.getComponents()[3];
                },
                backward: (p, s) => {
                    const comps = p.rawValue.getComponents();
                    comps[3] = s.rawValue;
                    return new Color(comps, p.rawValue.mode);
                },
            });
        }
        this.textC_ = new ColorTextController(doc, {
            colorType: config.colorType,
            parser: parseNumber,
            value: this.value,
            viewProps: this.viewProps,
        });
        this.view = new ColorPickerView(doc, {
            alphaViews: this.alphaIcs_
                ? {
                    palette: this.alphaIcs_.palette.view,
                    text: this.alphaIcs_.text.view,
                }
                : null,
            hPaletteView: this.hPaletteC_.view,
            supportsAlpha: config.supportsAlpha,
            svPaletteView: this.svPaletteC_.view,
            textView: this.textC_.view,
            viewProps: this.viewProps,
        });
    }
    get textController() {
        return this.textC_;
    }
}
