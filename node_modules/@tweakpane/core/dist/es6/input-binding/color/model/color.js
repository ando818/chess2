import { isEmpty } from '../../../misc/type-util';
import { appendAlphaComponent, constrainColorComponents, convertColor, removeAlphaComponent, } from './color-model';
function isRgbColorComponent(obj, key) {
    if (typeof obj !== 'object' || isEmpty(obj)) {
        return false;
    }
    return key in obj && typeof obj[key] === 'number';
}
// TODO: Make type required in the next major version
/**
 * @hidden
 */
export class Color {
    static black(type = 'int') {
        return new Color([0, 0, 0], 'rgb', type);
    }
    static fromObject(obj, type = 'int') {
        const comps = 'a' in obj ? [obj.r, obj.g, obj.b, obj.a] : [obj.r, obj.g, obj.b];
        return new Color(comps, 'rgb', type);
    }
    static toRgbaObject(color, type = 'int') {
        return color.toRgbaObject(type);
    }
    static isRgbColorObject(obj) {
        return (isRgbColorComponent(obj, 'r') &&
            isRgbColorComponent(obj, 'g') &&
            isRgbColorComponent(obj, 'b'));
    }
    static isRgbaColorObject(obj) {
        return this.isRgbColorObject(obj) && isRgbColorComponent(obj, 'a');
    }
    static isColorObject(obj) {
        return this.isRgbColorObject(obj);
    }
    static equals(v1, v2) {
        if (v1.mode !== v2.mode) {
            return false;
        }
        const comps1 = v1.comps_;
        const comps2 = v2.comps_;
        for (let i = 0; i < comps1.length; i++) {
            if (comps1[i] !== comps2[i]) {
                return false;
            }
        }
        return true;
    }
    constructor(comps, mode, type = 'int') {
        this.mode = mode;
        this.type = type;
        this.comps_ = constrainColorComponents(comps, mode, type);
    }
    getComponents(opt_mode, type = 'int') {
        return appendAlphaComponent(convertColor(removeAlphaComponent(this.comps_), { mode: this.mode, type: this.type }, { mode: opt_mode !== null && opt_mode !== void 0 ? opt_mode : this.mode, type }), this.comps_[3]);
    }
    toRgbaObject(type = 'int') {
        const rgbComps = this.getComponents('rgb', type);
        return {
            r: rgbComps[0],
            g: rgbComps[1],
            b: rgbComps[2],
            a: rgbComps[3],
        };
    }
}
