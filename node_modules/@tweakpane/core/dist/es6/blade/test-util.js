import { ValueMap } from '../common/model/value-map';
import { createValue } from '../common/model/values';
import { ViewProps } from '../common/model/view-props';
import { ParamsParsers, parseParams } from '../common/params-parsers';
import { PlainView } from '../common/view/plain';
import { CheckboxController } from '../input-binding/boolean/controller/checkbox';
import { BladeApi } from './common/api/blade';
import { BladeController } from './common/controller/blade';
import { createBlade } from './common/model/blade';
import { LabelController } from './label/controller/label';
import { LabeledValueController } from './label/controller/value-label';
class LabelableController {
    constructor(doc) {
        this.viewProps = ViewProps.create();
        this.view = new PlainView(doc, {
            viewName: '',
            viewProps: this.viewProps,
        });
    }
}
export function createEmptyLabelableController(doc) {
    return new LabelableController(doc);
}
export function createLabelController(doc, vc) {
    return new LabelController(doc, {
        blade: createBlade(),
        props: ValueMap.fromObject({ label: '' }),
        valueController: vc,
    });
}
export function createEmptyBladeController(doc) {
    return new BladeController({
        blade: createBlade(),
        view: new PlainView(doc, {
            viewName: '',
            viewProps: ViewProps.create(),
        }),
        viewProps: ViewProps.create(),
    });
}
export class TestValueBladeApi extends BladeApi {
    get value() {
        return this.controller_.valueController.value.rawValue;
    }
    set value(value) {
        this.controller_.valueController.value.rawValue = value;
    }
}
export const TestValueBladePlugin = {
    id: 'test',
    type: 'blade',
    accept(params) {
        const p = ParamsParsers;
        const r = parseParams(params, {
            view: p.required.constant('test'),
        });
        return r ? { params: r } : null;
    },
    controller(args) {
        return new LabeledValueController(args.document, {
            blade: createBlade(),
            props: ValueMap.fromObject({
                label: '',
            }),
            valueController: new CheckboxController(args.document, {
                value: createValue(false),
                viewProps: args.viewProps,
            }),
        });
    },
    api(args) {
        if (!(args.controller instanceof LabeledValueController)) {
            return null;
        }
        const vc = args.controller.valueController;
        if (!(vc instanceof CheckboxController)) {
            return null;
        }
        return new TestValueBladeApi(args.controller);
    },
};
