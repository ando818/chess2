import { Emitter } from '../../../common/model/emitter';
import { ValueMap } from '../../../common/model/value-map';
import { TpError } from '../../../common/tp-error';
import { RackLikeApi } from '../../common/api/rack-like-api';
import { TpTabSelectEvent, } from '../../common/api/tp-event';
import { RackApi } from '../../rack/api/rack';
import { TabPageController } from '../controller/tab-page';
import { TabPageApi } from './tab-page';
export class TabApi extends RackLikeApi {
    /**
     * @hidden
     */
    constructor(controller, pool) {
        super(controller, new RackApi(controller.rackController, pool));
        this.onPageAdd_ = this.onPageAdd_.bind(this);
        this.onPageRemove_ = this.onPageRemove_.bind(this);
        this.onSelect_ = this.onSelect_.bind(this);
        this.emitter_ = new Emitter();
        this.pageApiMap_ = new Map();
        this.rackApi_.on('change', (ev) => {
            this.emitter_.emit('change', {
                event: ev,
            });
        });
        this.rackApi_.on('update', (ev) => {
            this.emitter_.emit('update', {
                event: ev,
            });
        });
        this.controller_.tab.selectedIndex.emitter.on('change', this.onSelect_);
        this.controller_.pageSet.emitter.on('add', this.onPageAdd_);
        this.controller_.pageSet.emitter.on('remove', this.onPageRemove_);
        this.controller_.pageSet.items.forEach((pc) => {
            this.setUpPageApi_(pc);
        });
    }
    get pages() {
        return this.controller_.pageSet.items.map((pc) => {
            const api = this.pageApiMap_.get(pc);
            /* istanbul ignore next */
            if (!api) {
                throw TpError.shouldNeverHappen();
            }
            return api;
        });
    }
    addPage(params) {
        const doc = this.controller_.view.element.ownerDocument;
        const pc = new TabPageController(doc, {
            itemProps: ValueMap.fromObject({
                selected: false,
                title: params.title,
            }),
            props: ValueMap.fromObject({
                selected: false,
            }),
        });
        this.controller_.add(pc, params.index);
        const api = this.pageApiMap_.get(pc);
        /* istanbul ignore next */
        if (!api) {
            throw TpError.shouldNeverHappen();
        }
        return api;
    }
    removePage(index) {
        this.controller_.remove(index);
    }
    on(eventName, handler) {
        const bh = handler.bind(this);
        this.emitter_.on(eventName, (ev) => {
            bh(ev.event);
        });
        return this;
    }
    setUpPageApi_(pc) {
        const rackApi = this.rackApi_['apiSet_'].find((api) => api.controller_ === pc.contentController);
        if (!rackApi) {
            throw TpError.shouldNeverHappen();
        }
        const api = new TabPageApi(pc, rackApi);
        this.pageApiMap_.set(pc, api);
    }
    onPageAdd_(ev) {
        this.setUpPageApi_(ev.item);
    }
    onPageRemove_(ev) {
        const api = this.pageApiMap_.get(ev.item);
        /* istanbul ignore next */
        if (!api) {
            throw TpError.shouldNeverHappen();
        }
        this.pageApiMap_.delete(ev.item);
    }
    onSelect_(ev) {
        this.emitter_.emit('select', {
            event: new TpTabSelectEvent(this, ev.rawValue),
        });
    }
}
