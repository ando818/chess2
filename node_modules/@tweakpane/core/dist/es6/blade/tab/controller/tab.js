import { insertElementAt, removeElement } from '../../../common/dom-util';
import { RackLikeController } from '../../common/controller/rack-like';
import { NestedOrderedSet, } from '../../common/model/nested-ordered-set';
import { RackController } from '../../rack/controller/rack';
import { Tab } from '../model/tab';
import { TabView } from '../view/tab';
export class TabController extends RackLikeController {
    constructor(doc, config) {
        const cr = new RackController(doc, {
            blade: config.blade,
            viewProps: config.viewProps,
        });
        const tab = new Tab();
        super({
            blade: config.blade,
            rackController: cr,
            view: new TabView(doc, {
                contentsElement: cr.view.element,
                empty: tab.empty,
                viewProps: config.viewProps,
            }),
        });
        this.onPageAdd_ = this.onPageAdd_.bind(this);
        this.onPageRemove_ = this.onPageRemove_.bind(this);
        this.pageSet_ = new NestedOrderedSet(() => null);
        this.pageSet_.emitter.on('add', this.onPageAdd_);
        this.pageSet_.emitter.on('remove', this.onPageRemove_);
        this.tab = tab;
    }
    get pageSet() {
        return this.pageSet_;
    }
    add(pc, opt_index) {
        this.pageSet_.add(pc, opt_index);
    }
    remove(index) {
        this.pageSet_.remove(this.pageSet_.items[index]);
    }
    onPageAdd_(ev) {
        const pc = ev.item;
        insertElementAt(this.view.itemsElement, pc.itemController.view.element, ev.index);
        pc.itemController.viewProps.set('parent', this.viewProps);
        this.rackController.rack.add(pc.contentController, ev.index);
        this.tab.add(pc.props.value('selected'));
    }
    onPageRemove_(ev) {
        const pc = ev.item;
        removeElement(pc.itemController.view.element);
        pc.itemController.viewProps.set('parent', null);
        this.rackController.rack.remove(pc.contentController);
        this.tab.remove(pc.props.value('selected'));
    }
}
