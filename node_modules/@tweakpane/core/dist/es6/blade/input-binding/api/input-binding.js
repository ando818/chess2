import { Emitter } from '../../../common/model/emitter';
import { forceCast } from '../../../misc/type-util';
import { BladeApi } from '../../common/api/blade';
import { TpChangeEvent } from '../../common/api/tp-event';
/**
 * The API for the input binding between the parameter and the pane.
 * @template In The internal type.
 * @template Ex The external type (= parameter object).
 */
export class InputBindingApi extends BladeApi {
    /**
     * @hidden
     */
    constructor(controller) {
        super(controller);
        this.onBindingChange_ = this.onBindingChange_.bind(this);
        this.emitter_ = new Emitter();
        this.controller_.binding.emitter.on('change', this.onBindingChange_);
    }
    get label() {
        return this.controller_.props.get('label');
    }
    set label(label) {
        this.controller_.props.set('label', label);
    }
    on(eventName, handler) {
        const bh = handler.bind(this);
        this.emitter_.on(eventName, (ev) => {
            bh(ev.event);
        });
        return this;
    }
    refresh() {
        this.controller_.binding.read();
    }
    onBindingChange_(ev) {
        const value = ev.sender.target.read();
        this.emitter_.emit('change', {
            event: new TpChangeEvent(this, forceCast(value), this.controller_.binding.target.presetKey, ev.options.last),
        });
    }
}
