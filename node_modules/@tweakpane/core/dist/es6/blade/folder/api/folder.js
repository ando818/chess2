import { Emitter } from '../../../common/model/emitter';
import { RackLikeApi } from '../../common/api/rack-like-api';
import { TpFoldEvent, } from '../../common/api/tp-event';
import { RackApi } from '../../rack/api/rack';
export class FolderApi extends RackLikeApi {
    /**
     * @hidden
     */
    constructor(controller, pool) {
        super(controller, new RackApi(controller.rackController, pool));
        this.emitter_ = new Emitter();
        this.controller_.foldable
            .value('expanded')
            .emitter.on('change', (ev) => {
            this.emitter_.emit('fold', {
                event: new TpFoldEvent(this, ev.sender.rawValue),
            });
        });
        this.rackApi_.on('change', (ev) => {
            this.emitter_.emit('change', {
                event: ev,
            });
        });
        this.rackApi_.on('update', (ev) => {
            this.emitter_.emit('update', {
                event: ev,
            });
        });
    }
    get expanded() {
        return this.controller_.foldable.get('expanded');
    }
    set expanded(expanded) {
        this.controller_.foldable.set('expanded', expanded);
    }
    get title() {
        return this.controller_.props.get('title');
    }
    set title(title) {
        this.controller_.props.set('title', title);
    }
    get children() {
        return this.rackApi_.children;
    }
    addInput(object, key, opt_params) {
        return this.rackApi_.addInput(object, key, opt_params);
    }
    addMonitor(object, key, opt_params) {
        return this.rackApi_.addMonitor(object, key, opt_params);
    }
    addFolder(params) {
        return this.rackApi_.addFolder(params);
    }
    addButton(params) {
        return this.rackApi_.addButton(params);
    }
    addSeparator(opt_params) {
        return this.rackApi_.addSeparator(opt_params);
    }
    addTab(params) {
        return this.rackApi_.addTab(params);
    }
    add(api, opt_index) {
        return this.rackApi_.add(api, opt_index);
    }
    remove(api) {
        this.rackApi_.remove(api);
    }
    addBlade(params) {
        return this.rackApi_.addBlade(params);
    }
    /**
     * Adds a global event listener. It handles all events of child inputs/monitors.
     * @param eventName The event name to listen.
     * @return The API object itself.
     */
    on(eventName, handler) {
        const bh = handler.bind(this);
        this.emitter_.on(eventName, (ev) => {
            bh(ev.event);
        });
        return this;
    }
}
