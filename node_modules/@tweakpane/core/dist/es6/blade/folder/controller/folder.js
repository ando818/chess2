import { RackLikeController } from '../../common/controller/rack-like';
import { bindFoldable, Foldable } from '../../common/model/foldable';
import { RackController } from '../../rack/controller/rack';
import { FolderView } from '../view/folder';
/**
 * @hidden
 */
export class FolderController extends RackLikeController {
    constructor(doc, config) {
        var _a;
        const foldable = Foldable.create((_a = config.expanded) !== null && _a !== void 0 ? _a : true);
        const rc = new RackController(doc, {
            blade: config.blade,
            root: config.root,
            viewProps: config.viewProps,
        });
        super(Object.assign(Object.assign({}, config), { rackController: rc, view: new FolderView(doc, {
                containerElement: rc.view.element,
                foldable: foldable,
                props: config.props,
                viewName: config.root ? 'rot' : undefined,
                viewProps: config.viewProps,
            }) }));
        this.onTitleClick_ = this.onTitleClick_.bind(this);
        this.props = config.props;
        this.foldable = foldable;
        bindFoldable(this.foldable, this.view.containerElement);
        // Clean up transition manually
        // Toggling `expanded` doesn't fire transition events in some cases
        // (e.g. expanding empty folder: 0px -> 0px)
        this.rackController.rack.emitter.on('add', () => {
            this.foldable.cleanUpTransition();
        });
        this.rackController.rack.emitter.on('remove', () => {
            this.foldable.cleanUpTransition();
        });
        this.view.buttonElement.addEventListener('click', this.onTitleClick_);
    }
    get document() {
        return this.view.element.ownerDocument;
    }
    onTitleClick_() {
        this.foldable.set('expanded', !this.foldable.get('expanded'));
    }
}
