import { createBlade } from '../blade/common/model/blade';
import { MonitorBindingController } from '../blade/monitor-binding/controller/monitor-binding';
import { MonitorBinding } from '../common/binding/monitor';
import { IntervalTicker } from '../common/binding/ticker/interval';
import { ManualTicker } from '../common/binding/ticker/manual';
import { initializeBuffer } from '../common/model/buffered-value';
import { ValueMap } from '../common/model/value-map';
import { ViewProps } from '../common/model/view-props';
import { ParamsParsers } from '../common/params-parsers';
import { Constants } from '../misc/constants';
import { isEmpty } from '../misc/type-util';
function createTicker(document, interval) {
    return interval === 0
        ? new ManualTicker()
        : new IntervalTicker(document, interval !== null && interval !== void 0 ? interval : Constants.monitor.defaultInterval);
}
export function createMonitorBindingController(plugin, args) {
    var _a, _b, _c;
    const p = ParamsParsers;
    const result = plugin.accept(args.target.read(), args.params);
    if (isEmpty(result)) {
        return null;
    }
    const bindingArgs = {
        target: args.target,
        initialValue: result.initialValue,
        params: result.params,
    };
    const reader = plugin.binding.reader(bindingArgs);
    const bufferSize = (_b = (_a = p.optional.number(args.params.bufferSize).value) !== null && _a !== void 0 ? _a : (plugin.binding.defaultBufferSize &&
        plugin.binding.defaultBufferSize(result.params))) !== null && _b !== void 0 ? _b : 1;
    const interval = p.optional.number(args.params.interval).value;
    const binding = new MonitorBinding({
        reader: reader,
        target: args.target,
        ticker: createTicker(args.document, interval),
        value: initializeBuffer(bufferSize),
    });
    const disabled = p.optional.boolean(args.params.disabled).value;
    const hidden = p.optional.boolean(args.params.hidden).value;
    const controller = plugin.controller({
        document: args.document,
        params: result.params,
        value: binding.value,
        viewProps: ViewProps.create({
            disabled: disabled,
            hidden: hidden,
        }),
    });
    return new MonitorBindingController(args.document, {
        binding: binding,
        blade: createBlade(),
        props: ValueMap.fromObject({
            label: 'label' in args.params
                ? (_c = p.optional.string(args.params.label).value) !== null && _c !== void 0 ? _c : null
                : args.target.key,
        }),
        valueController: controller,
    });
}
