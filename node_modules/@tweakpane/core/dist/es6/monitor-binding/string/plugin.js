import { formatString, stringFromUnknown } from '../../common/converter/string';
import { ParamsParsers, parseParams } from '../../common/params-parsers';
import { Constants } from '../../misc/constants';
import { MultiLogController } from '../common/controller/multi-log';
import { SingleLogController } from '../common/controller/single-log';
/**
 * @hidden
 */
export const StringMonitorPlugin = {
    id: 'monitor-string',
    type: 'monitor',
    accept: (value, params) => {
        if (typeof value !== 'string') {
            return null;
        }
        const p = ParamsParsers;
        const result = parseParams(params, {
            lineCount: p.optional.number,
            multiline: p.optional.boolean,
        });
        return result
            ? {
                initialValue: value,
                params: result,
            }
            : null;
    },
    binding: {
        reader: (_args) => stringFromUnknown,
    },
    controller: (args) => {
        var _a;
        const value = args.value;
        const multiline = value.rawValue.length > 1 ||
            ('multiline' in args.params && args.params.multiline);
        if (multiline) {
            return new MultiLogController(args.document, {
                formatter: formatString,
                lineCount: (_a = args.params.lineCount) !== null && _a !== void 0 ? _a : Constants.monitor.defaultLineCount,
                value: value,
                viewProps: args.viewProps,
            });
        }
        return new SingleLogController(args.document, {
            formatter: formatString,
            value: value,
            viewProps: args.viewProps,
        });
    },
};
