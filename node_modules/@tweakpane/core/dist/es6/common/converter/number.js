import { isEmpty } from '../../misc/type-util';
import { parseEcmaNumberExpression } from './ecma/parser';
/**
 * @hidden
 */
export function parseNumber(text) {
    var _a;
    const r = parseEcmaNumberExpression(text);
    return (_a = r === null || r === void 0 ? void 0 : r.evaluate()) !== null && _a !== void 0 ? _a : null;
}
/**
 * @hidden
 */
export function numberFromUnknown(value) {
    if (typeof value === 'number') {
        return value;
    }
    if (typeof value === 'string') {
        const pv = parseNumber(value);
        if (!isEmpty(pv)) {
            return pv;
        }
    }
    return 0;
}
/**
 * @hidden
 */
export function numberToString(value) {
    return String(value);
}
/**
 * @hidden
 */
export function createNumberFormatter(digits) {
    return (value) => {
        return value.toFixed(Math.max(Math.min(digits, 20), 0));
    };
}
