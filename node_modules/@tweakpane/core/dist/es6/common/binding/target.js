import { TpError } from '../tp-error';
/**
 * A binding target.
 */
export class BindingTarget {
    constructor(obj, key, opt_id) {
        this.obj_ = obj;
        this.key_ = key;
        this.presetKey_ = opt_id !== null && opt_id !== void 0 ? opt_id : key;
    }
    static isBindable(obj) {
        if (obj === null) {
            return false;
        }
        if (typeof obj !== 'object') {
            return false;
        }
        return true;
    }
    /**
     * The property name of the binding.
     */
    get key() {
        return this.key_;
    }
    /**
     * The key used for presets.
     */
    get presetKey() {
        return this.presetKey_;
    }
    /**
     * Read a bound value.
     * @return A bound value
     */
    read() {
        return this.obj_[this.key_];
    }
    /**
     * Write a value.
     * @param value The value to write to the target.
     */
    write(value) {
        this.obj_[this.key_] = value;
    }
    /**
     * Write a value to the target property.
     * @param name The property name.
     * @param value The value to write to the target.
     */
    writeProperty(name, value) {
        const valueObj = this.read();
        if (!BindingTarget.isBindable(valueObj)) {
            throw TpError.notBindable();
        }
        if (!(name in valueObj)) {
            throw TpError.propertyNotFound(name);
        }
        valueObj[name] = value;
    }
}
