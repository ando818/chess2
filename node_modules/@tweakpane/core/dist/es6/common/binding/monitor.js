import { createPushedBuffer } from '../model/buffered-value';
import { Emitter } from '../model/emitter';
/**
 * @hidden
 */
export class MonitorBinding {
    constructor(config) {
        this.onTick_ = this.onTick_.bind(this);
        this.reader_ = config.reader;
        this.target = config.target;
        this.emitter = new Emitter();
        this.value = config.value;
        this.ticker = config.ticker;
        this.ticker.emitter.on('tick', this.onTick_);
        this.read();
    }
    dispose() {
        this.ticker.dispose();
    }
    read() {
        const targetValue = this.target.read();
        if (targetValue === undefined) {
            return;
        }
        const buffer = this.value.rawValue;
        const newValue = this.reader_(targetValue);
        this.value.rawValue = createPushedBuffer(buffer, newValue);
        this.emitter.emit('update', {
            rawValue: newValue,
            sender: this,
        });
    }
    onTick_(_) {
        this.read();
    }
}
