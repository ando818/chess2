"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPushedBuffer = exports.initializeBuffer = void 0;
var type_util_1 = require("../../misc/type-util");
var values_1 = require("./values");
function fillBuffer(buffer, bufferSize) {
    while (buffer.length < bufferSize) {
        buffer.push(undefined);
    }
}
/**
 * @hidden
 */
function initializeBuffer(bufferSize) {
    var buffer = [];
    fillBuffer(buffer, bufferSize);
    return (0, values_1.createValue)(buffer);
}
exports.initializeBuffer = initializeBuffer;
function createTrimmedBuffer(buffer) {
    var index = buffer.indexOf(undefined);
    return (0, type_util_1.forceCast)(index < 0 ? buffer : buffer.slice(0, index));
}
/**
 * @hidden
 */
function createPushedBuffer(buffer, newValue) {
    var newBuffer = __spreadArray(__spreadArray([], createTrimmedBuffer(buffer), true), [newValue], false);
    if (newBuffer.length > buffer.length) {
        newBuffer.splice(0, newBuffer.length - buffer.length);
    }
    else {
        fillBuffer(newBuffer, buffer.length);
    }
    return newBuffer;
}
exports.createPushedBuffer = createPushedBuffer;
